%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Thu Mar  1 21:51:32 2012
%%Title: /home/dlevin/Documents/Coding/rgbled.gh/schematic/rgb.sch
%%Author: (null)
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 260.000000 [(RGB Color Waves - Prolight 1 watt common-cathode LEDs) ] 0 50300 40900 180.555557 text
grestore
gsave
47000 48100 47000 48300 10 line
gsave
false true false false 208.000000 [(1) ] 90 46950 48250 144.444443 text
grestore
47000 49000 47000 48800 10 line
gsave
false false false false 208.000000 [(2) ] 90 46950 48850 144.444443 text
grestore
46800 48500 47200 48500 10 line
47000 48800 47000 48600 10 line
47000 48500 47000 48300 10 line
47000 49300 700 255 285 10 darc
46800 48389 46900 48389 10 line
46851 48440 46851 48340 10 line
newpath
47000 48100
25
0 360 arc
fill
newpath
47000 48100
25
0 360 arc
fill
newpath
47000 49000
25
0 360 arc
fill
newpath
47000 49000
25
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(100uF) ] 0 47600 49300 180.555557 text
grestore
gsave
46200 48100 46200 48300 10 line
46200 49000 46200 48800 10 line
46000 48500 46400 48500 10 line
46000 48600 46400 48600 10 line
46200 48800 46200 48600 10 line
46200 48500 46200 48300 10 line
newpath
46200 48100
25
0 360 arc
fill
newpath
46200 48100
25
0 360 arc
fill
newpath
46200 49000
25
0 360 arc
fill
newpath
46200 49000
25
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(10uF) ] 0 46600 49300 180.555557 text
grestore
gsave
44100 44200 44100 44000 10 line
44100 43300 44100 43500 10 line
44200 43800 44100 43700 10 line
44100 43700 44000 43800 10 line
44200 43800 44000 43800 10 line
44200 43700 44000 43700 10 line
44100 43700 44100 43500 10 line
44100 43800 44100 44000 10 line
44240 43770 44340 43670 10 line
44340 43670 44310 43720 10 line
44340 43670 44290 43700 10 line
44240 43700 44340 43600 10 line
44340 43600 44310 43650 10 line
44340 43600 44290 43630 10 line
grestore
gsave
44100 46800 44100 47000 10 line
43950 47000 44250 47000 10 line
gsave
false false false false 208.000000 [(+5V) ] 0 43975 47050 144.444443 text
grestore
grestore
44100 44200 44100 44600 10 line
gsave
43000 46400 42900 46200 10 line
42900 46200 42800 46400 10 line
42800 46400 42700 46200 10 line
42700 46200 42600 46400 10 line
43000 46400 43100 46200 10 line
43100 46200 43150 46300 10 line
43300 46300 43150 46300 10 line
42400 46300 42552 46300 10 line
42601 46400 42550 46300 10 line
grestore
gsave
43000 46400 42900 46200 10 line
42900 46200 42800 46400 10 line
42800 46400 42700 46200 10 line
42700 46200 42600 46400 10 line
43000 46400 43100 46200 10 line
43100 46200 43150 46300 10 line
43300 46300 43150 46300 10 line
42400 46300 42552 46300 10 line
42601 46400 42550 46300 10 line
grestore
gsave
false false false false 260.000000 [(120 Ohm) ] 0 42600 46500 180.555557 text
grestore
gsave
43000 46400 42900 46200 10 line
42900 46200 42800 46400 10 line
42800 46400 42700 46200 10 line
42700 46200 42600 46400 10 line
43000 46400 43100 46200 10 line
43100 46200 43150 46300 10 line
43300 46300 43150 46300 10 line
42400 46300 42552 46300 10 line
42601 46400 42550 46300 10 line
grestore
gsave
44200 44900 44000 45000 10 line
44000 45000 44200 45100 10 line
44200 45100 44000 45200 10 line
44000 45200 44200 45300 10 line
44200 44900 44000 44800 10 line
44000 44800 44100 44750 10 line
44100 44600 44100 44750 10 line
44100 45500 44100 45348 10 line
44200 45299 44100 45350 10 line
grestore
gsave
false false false false 260.000000 [(2 Ohm) ] 270 44300 45300 180.555557 text
grestore
43300 46300 43600 46300 10 line
44100 45800 44100 45500 10 line
gsave
43600 47800 44600 47800 10 line
44600 47800 44600 49200 10 line
44600 49200 43600 49200 10 line
43600 49200 43600 47800 10 line
gsave
false false false false 260.000000 [(ATtiny25) ] 0 43600 49250 180.555557 text
grestore
43300 49000 43600 49000 10 line
gsave
false true false false 208.000000 [(5) ] 0 43505 49045 144.444443 text
grestore
gsave
false false false false 208.000000 [(PB0/MOSI) ] 0 43655 48995 144.444443 text
grestore
43300 48800 43600 48800 10 line
gsave
false true false false 208.000000 [(6) ] 0 43505 48845 144.444443 text
grestore
gsave
false false false false 208.000000 [(PB1/MISO) ] 0 43655 48795 144.444443 text
grestore
43300 48600 43600 48600 10 line
gsave
false true false false 208.000000 [(7) ] 0 43505 48645 144.444443 text
grestore
gsave
false false false false 208.000000 [(PB2/SCK) ] 0 43655 48595 144.444443 text
grestore
43300 48200 43600 48200 10 line
gsave
false true false false 208.000000 [(3) ] 0 43505 48245 144.444443 text
grestore
gsave
false false false false 208.000000 [(PB4) ] 0 43655 48195 144.444443 text
grestore
43300 48000 43600 48000 10 line
gsave
false true false false 208.000000 [(1) ] 0 43505 48045 144.444443 text
grestore
gsave
false false false false 208.000000 [(PB5/\\_RESET\\_) ] 0 43655 47995 144.444443 text
grestore
43300 48400 43600 48400 10 line
gsave
false true false false 208.000000 [(2) ] 0 43505 48445 144.444443 text
grestore
gsave
false false false false 208.000000 [(PB3) ] 0 43655 48395 144.444443 text
grestore
44900 48200 44600 48200 10 line
gsave
false false false false 208.000000 [(4) ] 0 44695 48245 144.444443 text
grestore
gsave
false true false false 208.000000 [(GND) ] 0 44545 48195 144.444443 text
grestore
44900 48400 44600 48400 10 line
gsave
false false false false 208.000000 [(8) ] 0 44695 48445 144.444443 text
grestore
gsave
false true false false 208.000000 [(VCC) ] 0 44545 48395 144.444443 text
grestore
grestore
gsave
false false false false 260.000000 [(ATTiny) ] 0 44400 49250 180.555557 text
grestore
44900 48400 45500 48400 10 line
45500 48400 45500 49000 10 line
45500 49000 47700 49000 10 line
44900 48100 47700 48100 10 line
44900 48100 44900 48200 10 line
gsave
47700 48100 47900 48100 10 line
47900 48250 47900 47950 10 line
gsave
false false false false 208.000000 [(Vss) ] 270 47950 48225 144.444443 text
grestore
grestore
gsave
48000 48950 48000 49050 10 line
47950 48900 47950 49100 10 line
47900 48850 47900 49150 10 line
47700 49000 47900 49000 10 line
grestore
gsave
43800 46000 43800 46600 10 line
43600 46300 43800 46300 10 line
gsave
false false false true 156.000000 [(B) ] 0 43700 46250 108.333336 text
grestore
44100 45800 44100 46000 10 line
gsave
false false false true 156.000000 [(C) ] 0 44000 45950 108.333336 text
grestore
44100 46600 44100 46800 10 line
gsave
false false false true 156.000000 [(E) ] 0 44000 46750 108.333336 text
grestore
43800 46450 44100 46600 10 line
43800 46150 44100 46000 10 line
10 setlinewidth
43897 46459 moveto 43800 46450 lineto 43869 46523 lineto 43877 46489 lineto closepath stroke
43897 46459 moveto 43800 46450 lineto 43869 46523 lineto 43877 46489 lineto closepath fill
grestore
gsave
false false false true 260.000000 [(Q?) ] 0 44200 46300 180.555557 text
grestore
gsave
44050 42700 44150 42700 10 line
44000 42750 44200 42750 10 line
43950 42800 44250 42800 10 line
44100 43000 44100 42800 10 line
grestore
44100 43000 44100 43300 10 line
gsave
46400 44200 46400 44000 10 line
46400 43300 46400 43500 10 line
46500 43800 46400 43700 10 line
46400 43700 46300 43800 10 line
46500 43800 46300 43800 10 line
46500 43700 46300 43700 10 line
46400 43700 46400 43500 10 line
46400 43800 46400 44000 10 line
46540 43770 46640 43670 10 line
46640 43670 46610 43720 10 line
46640 43670 46590 43700 10 line
46540 43700 46640 43600 10 line
46640 43600 46610 43650 10 line
46640 43600 46590 43630 10 line
grestore
gsave
46400 46800 46400 47000 10 line
46250 47000 46550 47000 10 line
gsave
false false false false 208.000000 [(+5V) ] 0 46275 47050 144.444443 text
grestore
grestore
46400 44200 46400 44600 10 line
gsave
45300 46400 45200 46200 10 line
45200 46200 45100 46400 10 line
45100 46400 45000 46200 10 line
45000 46200 44900 46400 10 line
45300 46400 45400 46200 10 line
45400 46200 45450 46300 10 line
45600 46300 45450 46300 10 line
44700 46300 44852 46300 10 line
44901 46400 44850 46300 10 line
grestore
gsave
45300 46400 45200 46200 10 line
45200 46200 45100 46400 10 line
45100 46400 45000 46200 10 line
45000 46200 44900 46400 10 line
45300 46400 45400 46200 10 line
45400 46200 45450 46300 10 line
45600 46300 45450 46300 10 line
44700 46300 44852 46300 10 line
44901 46400 44850 46300 10 line
grestore
gsave
false false false false 260.000000 [(120 Ohm) ] 0 44900 46500 180.555557 text
grestore
gsave
45300 46400 45200 46200 10 line
45200 46200 45100 46400 10 line
45100 46400 45000 46200 10 line
45000 46200 44900 46400 10 line
45300 46400 45400 46200 10 line
45400 46200 45450 46300 10 line
45600 46300 45450 46300 10 line
44700 46300 44852 46300 10 line
44901 46400 44850 46300 10 line
grestore
gsave
46500 44900 46300 45000 10 line
46300 45000 46500 45100 10 line
46500 45100 46300 45200 10 line
46300 45200 46500 45300 10 line
46500 44900 46300 44800 10 line
46300 44800 46400 44750 10 line
46400 44600 46400 44750 10 line
46400 45500 46400 45348 10 line
46500 45299 46400 45350 10 line
grestore
gsave
false false false false 260.000000 [(2 Ohm) ] 270 46600 45300 180.555557 text
grestore
45600 46300 45900 46300 10 line
46400 45800 46400 45500 10 line
gsave
46100 46000 46100 46600 10 line
45900 46300 46100 46300 10 line
gsave
false false false true 156.000000 [(B) ] 0 46000 46250 108.333336 text
grestore
46400 45800 46400 46000 10 line
gsave
false false false true 156.000000 [(C) ] 0 46300 45950 108.333336 text
grestore
46400 46600 46400 46800 10 line
gsave
false false false true 156.000000 [(E) ] 0 46300 46750 108.333336 text
grestore
46100 46450 46400 46600 10 line
46100 46150 46400 46000 10 line
10 setlinewidth
46197 46459 moveto 46100 46450 lineto 46169 46523 lineto 46177 46489 lineto closepath stroke
46197 46459 moveto 46100 46450 lineto 46169 46523 lineto 46177 46489 lineto closepath fill
grestore
gsave
false false false true 260.000000 [(Q?) ] 0 46500 46300 180.555557 text
grestore
gsave
46350 42700 46450 42700 10 line
46300 42750 46500 42750 10 line
46250 42800 46550 42800 10 line
46400 43000 46400 42800 10 line
grestore
46400 43000 46400 43300 10 line
gsave
48800 44200 48800 44000 10 line
48800 43300 48800 43500 10 line
48900 43800 48800 43700 10 line
48800 43700 48700 43800 10 line
48900 43800 48700 43800 10 line
48900 43700 48700 43700 10 line
48800 43700 48800 43500 10 line
48800 43800 48800 44000 10 line
48940 43770 49040 43670 10 line
49040 43670 49010 43720 10 line
49040 43670 48990 43700 10 line
48940 43700 49040 43600 10 line
49040 43600 49010 43650 10 line
49040 43600 48990 43630 10 line
grestore
gsave
48800 46800 48800 47000 10 line
48650 47000 48950 47000 10 line
gsave
false false false false 208.000000 [(+5V) ] 0 48675 47050 144.444443 text
grestore
grestore
48800 44200 48800 44600 10 line
gsave
47700 46400 47600 46200 10 line
47600 46200 47500 46400 10 line
47500 46400 47400 46200 10 line
47400 46200 47300 46400 10 line
47700 46400 47800 46200 10 line
47800 46200 47850 46300 10 line
48000 46300 47850 46300 10 line
47100 46300 47252 46300 10 line
47301 46400 47250 46300 10 line
grestore
gsave
47700 46400 47600 46200 10 line
47600 46200 47500 46400 10 line
47500 46400 47400 46200 10 line
47400 46200 47300 46400 10 line
47700 46400 47800 46200 10 line
47800 46200 47850 46300 10 line
48000 46300 47850 46300 10 line
47100 46300 47252 46300 10 line
47301 46400 47250 46300 10 line
grestore
gsave
47700 46400 47600 46200 10 line
47600 46200 47500 46400 10 line
47500 46400 47400 46200 10 line
47400 46200 47300 46400 10 line
47700 46400 47800 46200 10 line
47800 46200 47850 46300 10 line
48000 46300 47850 46300 10 line
47100 46300 47252 46300 10 line
47301 46400 47250 46300 10 line
grestore
gsave
false false false false 260.000000 [(120 Ohm) ] 0 47300 46500 180.555557 text
grestore
gsave
48900 44900 48700 45000 10 line
48700 45000 48900 45100 10 line
48900 45100 48700 45200 10 line
48700 45200 48900 45300 10 line
48900 44900 48700 44800 10 line
48700 44800 48800 44750 10 line
48800 44600 48800 44750 10 line
48800 45500 48800 45348 10 line
48900 45299 48800 45350 10 line
grestore
gsave
false false false false 260.000000 [(2 Ohm) ] 270 49000 45300 180.555557 text
grestore
48000 46300 48300 46300 10 line
48800 45800 48800 45500 10 line
gsave
48500 46000 48500 46600 10 line
48300 46300 48500 46300 10 line
gsave
false false false true 156.000000 [(B) ] 0 48400 46250 108.333336 text
grestore
48800 45800 48800 46000 10 line
gsave
false false false true 156.000000 [(C) ] 0 48700 45950 108.333336 text
grestore
48800 46600 48800 46800 10 line
gsave
false false false true 156.000000 [(E) ] 0 48700 46750 108.333336 text
grestore
48500 46450 48800 46600 10 line
48500 46150 48800 46000 10 line
10 setlinewidth
48597 46459 moveto 48500 46450 lineto 48569 46523 lineto 48577 46489 lineto closepath stroke
48597 46459 moveto 48500 46450 lineto 48569 46523 lineto 48577 46489 lineto closepath fill
grestore
gsave
false false false true 260.000000 [(Q?) ] 0 48900 46300 180.555557 text
grestore
gsave
48750 42700 48850 42700 10 line
48700 42750 48900 42750 10 line
48650 42800 48950 42800 10 line
48800 43000 48800 42800 10 line
grestore
48800 43000 48800 43300 10 line
43300 49000 42400 49000 10 line
42400 49000 42400 46300 10 line
43300 48800 42900 48800 10 line
42900 48800 42900 47300 10 line
42900 47300 44700 47300 10 line
44700 47300 44700 46300 10 line
43300 48200 43000 48200 10 line
43000 47600 43000 48200 10 line
43000 47600 47100 47600 10 line
47100 47600 47100 46300 10 line
newpath
47000 48100
25
0 360 arc
fill
newpath
47000 48100
25
0 360 arc
fill
newpath
47000 49000
25
0 360 arc
fill
newpath
47000 49000
25
0 360 arc
fill
newpath
46200 48100
25
0 360 arc
fill
newpath
46200 48100
25
0 360 arc
fill
newpath
46200 49000
25
0 360 arc
fill
newpath
46200 49000
25
0 360 arc
fill
newpath
43300 46300
25
0 360 arc
fill
newpath
47000 49000
25
0 360 arc
fill
newpath
46200 49000
25
0 360 arc
fill
newpath
47000 48100
25
0 360 arc
fill
newpath
46200 48100
25
0 360 arc
fill
newpath
45600 46300
25
0 360 arc
fill
newpath
48000 46300
25
0 360 arc
fill
newpath
42400 46300
25
0 360 arc
fill
newpath
44700 46300
25
0 360 arc
fill
newpath
47100 46300
25
0 360 arc
fill
showpage
%%End
